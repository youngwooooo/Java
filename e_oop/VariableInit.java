package e_oop;

public class VariableInit {
	
	// 변수의 초기화
	// 1. 명시적 초기화
	int var = 10; 
	static int classVar = 20;
	
	// 2. 초기화 블럭
	{ // 아무것도 없이 블럭을 열면 초기화 블럭
		var = 30;
	}
	
	static{ // static을 앞에 붙이면 클래스 변수 초기화
		classVar = 40;
	}

	// 3. 생성자(클래스이름과 똑같은 이름을 가진 메소드), 뒤에 ();가 붙으면 무조건 메소드임!
	/* - 클래스와 같은 이름의 메소드
	 * - 인스턴스 변수를 초기화하기 위해 사용한다.
	 * - 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
	 * - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다.
	 * - 생성자는 리턴타입이 없다.
	 */
	VariableInit(){
		var = 50;
		
		// 생성자 사용 이유!
		// 초기화에 여러 줄의 코드가 필요할 때
		// 초기화에 파라미터가 필요할 때
	}
	
	
	public static void main(String[] args) {
		
		Init i = new Init();
		i.a = 10;
		i.b = 20;
		i.c = 30;
		
		Init i2 = new Init();
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
		
		Init i3 = new Init(70, 80, 90);  // 생성자를 사용하면 이처럼 객채생성을 간단하게 할 수 있다.
				
		
	}
	
	
}

class Init{
	
	int a;
	int b;
	int c;
	
	Init(int a, int b, int c){
		this.a = a;
		this.b = b;
		this.c = c;
		// this : 인스턴스 변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해 사용한다.
		// 클래스 객체의 주소가 this에 저장됨.
	}
	
	// 메소드는 똑같은 이름의 메소드가 존재할 수 있다!  ==> 오버로딩
	// 오버로딩 : 같은 이름의 메소드를 여러개 정의하는 것  ==> 파라미터로 구분을 한다.(개수, 파일 등)
	
	Init(){  // 생성자를 만들어줘서 Init i, Init i2가 컴파일 에러가 나지 않는다.
//		a = 10;
//		b = 20;
//		c = 30;
		this(10, 20, 30);  // 생성자의 첫 줄에서만 사용할 수 있다.
		// this() : 생성자에서 다른 생성자를 호출할 때 사용한다.
		// 두 개의 같은 생성자가 있을 때 1번 생성자 안의 초기화 된 복잡한 로직이 2번 생성자에서도 비슷하게 쓰일 것임.
		// 그렇기 때문에 그 로직을 다시 복잡하게 쓰지않고 this로 호출을 하면 편하다.
		// 클래스 내,외부 적으로도 인스턴스 변수를 사용해야 할 때가 있을 것, 그렇기 때문에 같은 생성자를 여러 개 만드는 것!
	}
	
	
}



























